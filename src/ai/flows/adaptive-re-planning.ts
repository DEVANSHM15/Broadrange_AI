
// This is an automatically generated file. Please do not edit this file directly.
'use server';
/**
 * @fileOverview An AI agent that dynamically adjusts a study schedule based on skipped days.
 *
 * - adaptiveRePlanning - A function that handles the re-planning process.
 * - AdaptiveRePlanningInput - The input type for the adaptiveRePlanning function.
 * - AdaptiveRePlanningOutput - The return type for the adaptiveRePlanning function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TaskSchema = z.object({
  id: z.string(),
  date: z.string(),
  task: z.string(),
  completed: z.boolean(),
  youtubeSearchQuery: z.string().optional(),
  referenceSearchQuery: z.string().optional(),
  subTasks: z.array(z.any()).optional(),
  quizScore: z.number().optional(),
  quizAttempted: z.boolean().optional(),
  notes: z.string().optional(),
});

const AdaptiveRePlanningInputSchema = z.object({
  tasks: z.array(TaskSchema).describe("The list of all tasks from the original plan, including their completion status."),
  skippedDays: z
    .number()
    .int()
    .min(0)
    .describe('The number of days the user skipped in their study schedule.'),
  remainingDays: z.number().int().min(1).describe("The total duration for the new, revised study plan."),
  subjects: z.string().describe('The subject(s) being studied.'),
  dailyStudyHours: z.number().describe('The number of hours available for studying per day.'),
});

export type AdaptiveRePlanningInput = z.infer<typeof AdaptiveRePlanningInputSchema>;

const AdaptiveRePlanningOutputSchema = z.object({
  revisedSchedule: z
    .string()
    .describe(
      "The revised study schedule, delivered as a JSON string. This string must parse into a JavaScript array of objects. Each object in the array represents a single day's study tasks and must contain: 'date' (string, 'YYYY-MM-DD'), 'task' (string, description of activities), an optional 'youtubeSearchQuery' (string, concise YouTube search query), and an optional 'referenceSearchQuery' (string, concise web search query for reference material). Example: '[{\"date\": \"2024-01-10\", \"task\": \"Catch up on Math: Chapter 2 for 3 hours.\", \"youtubeSearchQuery\": \"math chapter 2 algebra tutorial\", \"referenceSearchQuery\": \"algebra chapter 2 summary\"}]'"
    ),
  summary: z.string().describe('A short summary of the changes made to the schedule, mentioning how uncompleted tasks were redistributed.'),
});

export type AdaptiveRePlanningOutput = z.infer<typeof AdaptiveRePlanningOutputSchema>;

export async function adaptiveRePlanning(input: AdaptiveRePlanningInput): Promise<AdaptiveRePlanningOutput> {
  return adaptiveRePlanningFlow(input);
}

const prompt = ai.definePrompt({
  name: 'adaptiveRePlanningPrompt',
  input: {schema: AdaptiveRePlanningInputSchema},
  output: {schema: AdaptiveRePlanningOutputSchema},
  prompt: `You are an expert study plan optimizer. A user has fallen behind on their study schedule and needs a revised plan. Your goal is to create a new schedule that incorporates all *uncompleted* tasks from the original plan into the new, shorter timeframe, continuing from where they left off.

Here is the user's situation:
- Subjects: {{{subjects}}}
- Daily Study Hours: {{{dailyStudyHours}}}
- New plan duration (remaining days): {{{remainingDays}}}
- Skipped Days: {{{skippedDays}}}

Here is the full list of tasks from their original plan, with their completion status:
{{#each tasks}}
- Date: {{this.date}}, Task: "{{this.task}}", Completed: {{this.completed}}
{{/each}}

Instructions for revision:
1.  **Identify the uncompleted tasks.** These are all the tasks marked with "Completed: false".
2.  **Reschedule ONLY the uncompleted tasks.** Distribute these remaining tasks across the new \`{{{remainingDays}}}\` day duration. Do not include tasks that are already completed. The new plan should feel like a continuation, not a restart.
3.  **Adjust daily workload.** The tasks for each new day should be reasonable for the \`{{{dailyStudyHours}}}\` available. You may need to combine smaller uncompleted tasks or split larger ones across multiple days.
4.  **Provide the output as a valid JSON string.** The output for 'revisedSchedule' must parse into an array of objects.
5.  Each object in the JSON array represents a single day's study tasks and must have:
    - 'date' (string): 'YYYY-MM-DD', starting from today's date and incrementing correctly for the new plan duration.
    - 'task' (string): A clear description of the study activities for the day.
    - 'youtubeSearchQuery' (string, optional): A concise YouTube search query.
    - 'referenceSearchQuery' (string, optional): A concise web search query.
6.  Provide a short 'summary' of the changes, explaining how the uncompleted tasks were redistributed. For example: "I've rescheduled the 8 remaining tasks across your new 5-day plan, starting with the topics you missed."
`,
});

const adaptiveRePlanningFlow = ai.defineFlow(
  {
    name: 'adaptiveRePlanningFlow',
    inputSchema: AdaptiveRePlanningInputSchema,
    outputSchema: AdaptiveRePlanningOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
