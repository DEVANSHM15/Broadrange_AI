
// This is an automatically generated file. Please do not edit this file directly.
'use server';
/**
 * @fileOverview An AI agent that dynamically adjusts a study schedule based on skipped days.
 *
 * - adaptiveRePlanning - A function that handles the re-planning process.
 * - AdaptiveRePlanningInput - The input type for the adaptiveRePlanning function.
 * - AdaptiveRePlanningOutput - The return type for the adaptiveRePlanning function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AdaptiveRePlanningInputSchema = z.object({
  originalSchedule: z
    .string()
    .describe("The original study schedule in JSON format. Each entry should have 'date' and 'task' fields."),
  skippedDays: z
    .number()
    .int()
    .min(0)
    .describe('The number of days the user skipped in their study schedule.'),
  remainingDays: z.number().int().min(0).describe("The remaining days in the study plan."),
  subjects: z.string().describe('The subject that is being studied.'),
  dailyStudyHours: z.number().describe('The number of hours available for studying per day.'),
});

export type AdaptiveRePlanningInput = z.infer<typeof AdaptiveRePlanningInputSchema>;

const AdaptiveRePlanningOutputSchema = z.object({
  revisedSchedule: z
    .string()
    .describe(
      "The revised study schedule, delivered as a JSON string. This string must parse into a JavaScript array of objects. Each object in the array represents a single day's study tasks and must contain: 'date' (string, 'YYYY-MM-DD'), 'task' (string, description of activities), an optional 'youtubeSearchQuery' (string, concise YouTube search query), and an optional 'referenceSearchQuery' (string, concise web search query for reference material). Example: '[{\"date\": \"2024-01-10\", \"task\": \"Catch up on Math: Chapter 2 for 3 hours.\", \"youtubeSearchQuery\": \"math chapter 2 algebra tutorial\", \"referenceSearchQuery\": \"algebra chapter 2 summary\"}]'"
    ),
  summary: z.string().describe('A short summary of the changes made to the schedule.'),
});

export type AdaptiveRePlanningOutput = z.infer<typeof AdaptiveRePlanningOutputSchema>;

export async function adaptiveRePlanning(input: AdaptiveRePlanningInput): Promise<AdaptiveRePlanningOutput> {
  return adaptiveRePlanningFlow(input);
}

const prompt = ai.definePrompt({
  name: 'adaptiveRePlanningPrompt',
  input: {schema: AdaptiveRePlanningInputSchema},
  output: {schema: AdaptiveRePlanningOutputSchema},
  prompt: `You are an expert study plan optimizer. Given the original study schedule, the number of skipped days, the remaining days, subjects, and available daily study hours, generate a revised study schedule that fits within the remaining time.

Original Schedule: {{{originalSchedule}}}
Skipped Days: {{{skippedDays}}}
Remaining Days: {{{remainingDays}}}
Subjects: {{{subjects}}}
Daily Study Hours: {{{dailyStudyHours}}}

Instructions for revision:
1. Revise the schedule to ensure all important topics are covered within the remaining days.
2. Provide the revised schedule as a valid JSON string that parses into an array of objects.
3. Each object in the array corresponds to a study day and must have:
    - 'date' (string): 'YYYY-MM-DD', correctly incremented.
    - 'task' (string): Detailed description of study activities for the day, including subject names and estimated time allocation reflecting 'dailyStudyHours'.
    - 'youtubeSearchQuery' (string, optional): A concise YouTube search query (3-5 words) relevant to the task.
    - 'referenceSearchQuery' (string, optional): A concise web search query (3-5 words) for reference materials relevant to the task.
4. Ensure tasks are actionable and clear.
5. Also, provide a short 'summary' of the changes made to the schedule.
`,
});

const adaptiveRePlanningFlow = ai.defineFlow(
  {
    name: 'adaptiveRePlanningFlow',
    inputSchema: AdaptiveRePlanningInputSchema,
    outputSchema: AdaptiveRePlanningOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

