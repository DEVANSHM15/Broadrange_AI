
// This is an automatically generated file. Please do not edit this file directly.
'use server';
/**
 * @fileOverview An AI agent that dynamically adjusts a study schedule based on skipped days.
 *
 * - adaptiveRePlanning - A function that handles the re-planning process.
 * - AdaptiveRePlanningInput - The input type for the adaptiveRePlanning function.
 * - AdaptiveRePlanningOutput - The return type for the adaptiveRePlanning function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TaskSchema = z.object({
  id: z.string(),
  date: z.string(),
  task: z.string(),
  completed: z.boolean(),
  youtubeSearchQuery: z.string().optional(),
  referenceSearchQuery: z.string().optional(),
  subTasks: z.array(z.any()).optional(),
  quizScore: z.number().optional(),
  quizAttempted: z.boolean().optional(),
  notes: z.string().optional(),
});

const AdaptiveRePlanningInputSchema = z.object({
  tasks: z.array(TaskSchema).describe("The list of all tasks from the original plan, including their completion status."),
  skippedDays: z
    .number()
    .int()
    .min(0)
    .describe('The number of days the user skipped in their study schedule.'),
  remainingDays: z.number().int().min(1).describe("The total duration for the new, revised study plan."),
  subjects: z.string().describe('The subject(s) being studied.'),
  dailyStudyHours: z.number().describe('The number of hours available for studying per day.'),
});

export type AdaptiveRePlanningInput = z.infer<typeof AdaptiveRePlanningInputSchema>;

const AdaptiveRePlanningOutputSchema = z.object({
  revisedSchedule: z
    .string()
    .describe(
      "The revised study schedule, delivered as a JSON string. This string must parse into a JavaScript array of objects. Each object in the array represents a single day's study tasks and must contain: 'date' (string, 'YYYY-MM-DD'), 'task' (string, description of activities), an optional 'youtubeSearchQuery' (string, concise YouTube search query), and an optional 'referenceSearchQuery' (string, concise web search query for reference material). Example: '[{\"date\": \"2024-01-10\", \"task\": \"Catch up on Math: Chapter 2 for 3 hours.\", \"youtubeSearchQuery\": \"math chapter 2 algebra tutorial\", \"referenceSearchQuery\": \"algebra chapter 2 summary\"}]'"
    ),
  summary: z.string().describe('A short summary of the changes made to the schedule, mentioning how uncompleted tasks were redistributed.'),
});

export type AdaptiveRePlanningOutput = z.infer<typeof AdaptiveRePlanningOutputSchema>;

export async function adaptiveRePlanning(input: AdaptiveRePlanningInput): Promise<AdaptiveRePlanningOutput> {
  return adaptiveRePlanningFlow(input);
}

const prompt = ai.definePrompt({
  name: 'adaptiveRePlanningPrompt',
  input: {schema: AdaptiveRePlanningInputSchema},
  output: {schema: AdaptiveRePlanningOutputSchema},
  prompt: `You are an expert study plan optimizer. A user has fallen behind on their study schedule and needs a revised plan. Your goal is to create a new, realistic schedule that helps them catch up by only rescheduling uncompleted tasks.

**User's Situation:**
- Subjects: {{{subjects}}}
- Daily Study Hours: {{{dailyStudyHours}}}
- New Plan Duration: {{{remainingDays}}} days
- Skipped Days: {{{skippedDays}}}

**User's Progress So Far:**
Here is the user's original plan. Pay close attention to the 'completed' status.
{{#each tasks}}
- Task: "{{this.task}}" on {{this.date}} - Completed: {{this.completed}}
{{/each}}

**Your Task: Create a Revised Continuation Plan**

1.  **Analyze and Filter:** First, identify ALL tasks from the list above where \`Completed\` is \`false\`. These are the ONLY tasks you need to reschedule. Completely ignore all tasks where \`Completed\` is \`true\`.
2.  **Reschedule Logically:** Distribute this list of uncompleted tasks across the \`{{{remainingDays}}}\`-day plan. The new schedule should be a seamless continuation, starting with the earliest uncompleted task. **Do not restart subjects from the beginning.**
3.  **Balance the Workload:** Adjust the daily workload to be reasonable for the \`{{{dailyStudyHours}}}\` available. You can combine smaller topics into a single day or split larger topics across multiple days if necessary.
4.  **Format the Output Strictly:** Your output must be a valid JSON object with two keys: \`revisedSchedule\` and \`summary\`.
    - The \`revisedSchedule\` value MUST be a JSON string that can be parsed into a JavaScript array of objects. Do not output a raw array, it must be a string.
    - Each object in the array represents a single day and MUST contain:
        - \`date\` (string, 'YYYY-MM-DD', starting from today and incrementing for each subsequent day).
        - \`task\` (string, description of activities for that day).
        - \`youtubeSearchQuery\` (string, optional, concise YouTube search query).
        - \`referenceSearchQuery\` (string, optional, concise web search query).
    - Example for \`revisedSchedule\` string: \`'[{\"date\": \"2024-06-28\", \"task\": \"Catch up on Math: Chapter 2 for 3 hours.\", \"youtubeSearchQuery\": \"math chapter 2 algebra tutorial\", \"referenceSearchQuery\": \"algebra chapter 2 summary\"}]'\`
5.  **Provide a Summary:** In the \`summary\` field, write a brief, encouraging message explaining the changes. For example: "I've rescheduled the 8 remaining tasks across your new 5-day plan, starting with the topics you missed."
`,
});

const adaptiveRePlanningFlow = ai.defineFlow(
  {
    name: 'adaptiveRePlanningFlow',
    inputSchema: AdaptiveRePlanningInputSchema,
    outputSchema: AdaptiveRePlanningOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    
    if (!output || !output.revisedSchedule) {
      throw new Error('The AI failed to generate a revised schedule. The response was empty.');
    }

    try {
      const parsedSchedule = JSON.parse(output.revisedSchedule);
      if (!Array.isArray(parsedSchedule) || parsedSchedule.length === 0) {
        throw new Error("The AI returned a schedule with an invalid format (not a non-empty array).");
      }
    } catch (e) {
      console.error("Failed to parse revised schedule from AI:", e);
      throw new Error("The AI returned a schedule with invalid JSON. Please try again.");
    }
    
    return output;
  }
);
