
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates a personalized study schedule based on user inputs.
 *
 * - generateStudySchedule - A function that generates a study schedule.
 * - GenerateStudyScheduleInput - The input type for the generateStudySchedule function.
 * - GenerateStudyScheduleOutput - The return type for the generateStudySchedule function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { PlanInput } from '@/types';


const GenerateStudyScheduleInputSchema = z.object({
  subjects: z
    .string()
    .describe('The subjects to study, potentially with priority in parentheses, e.g., "Math (1), Physics (2)". Lower number means higher priority.'),
  dailyStudyHours: z
    .number()
    .describe('The number of hours available for study each day.'),
  studyDurationDays: z
    .number()
    .describe('The total duration of the study plan in days.'),
  subjectDetails: z
    .string()
    .optional()
    .describe('Optional: User-provided details about specific topics or chapters for each subject. Use this to make the tasks more specific.'),
  startDate: z
    .string()
    .optional()
    .describe("Optional: The preferred start date for the study plan in 'YYYY-MM-DD' format. If not provided, use today's date or a placeholder and increment from there."),
});
export type GenerateStudyScheduleInput = z.infer<typeof GenerateStudyScheduleInputSchema>;

const GenerateStudyScheduleOutputSchema = z.object({
  schedule: z
    .string()
    .describe(
      "A personalized study schedule, delivered as a JSON string. This string must parse into a JavaScript array of objects. Each object in the array represents a single day's study tasks and must contain: 'date' (string, 'YYYY-MM-DD'), 'task' (string, description of activities, including subject name and estimated time for each subject/activity within the dailyStudyHours), an optional 'youtubeSearchQuery' (string, concise YouTube search query), and an optional 'referenceSearchQuery' (string, concise web search query for reference material). Example: '[{\"date\": \"2024-01-01\", \"task\": \"Math: Chapter 1 Review (Priority 1 Topic) for 2 hours, Physics: Newton's Laws intro (Priority 2) for 1 hour.\", \"youtubeSearchQuery\": \"math chapter 1 review algebra\", \"referenceSearchQuery\": \"algebra chapter 1 summary notes\"}]'"
    ),
});
export type GenerateStudyScheduleOutput = z.infer<typeof GenerateStudyScheduleOutputSchema>;

export async function generateStudySchedule(
  input: GenerateStudyScheduleInput
): Promise<GenerateStudyScheduleOutput> {
  return generateStudyScheduleFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateStudySchedulePrompt',
  input: {schema: GenerateStudyScheduleInputSchema},
  output: {schema: GenerateStudyScheduleOutputSchema},
  model: 'googleai/gemini-1.5-flash-latest',
  prompt: `You are an AI study planner. Generate a personalized study schedule based on the user's inputs.

  Subjects: {{{subjects}}}
  (Priorities are indicated in parentheses, e.g., "SubjectA (1), SubjectB (2)". A lower number means higher priority.)

  Daily Study Hours: {{{dailyStudyHours}}}
  Study Duration (Days): {{{studyDurationDays}}}

  {{#if startDate}}
  Start Date: {{{startDate}}}
  Use this as the first date for the schedule.
  {{else}}
  Start Date: Not specified. Assume today's date or use '2024-01-01' as a placeholder if today is unknown, then increment correctly.
  {{/if}}

  {{#if subjectDetails}}
  Subject Details/Topics Provided by User:
  {{{subjectDetails}}}
  Use these details to break down tasks for each subject. If details are vague or missing for a subject, generate general introductory tasks for it.
  {{/if}}

  Instructions:
  1. Analyze the subjects and their priorities. Allocate study time within the 'dailyStudyHours' for each day's tasks.
  2. For the 'task' field: Clearly state the subject, the specific topic/activity, and an estimated duration for each part of the task, ensuring the sum of these durations aligns with 'dailyStudyHours'. For example, if dailyStudyHours is 3 and subjects are SubjectA (P1) and SubjectB (P2), a task might be "SubjectA: Topic X (2 hours), SubjectB: Topic Y (1 hour)".
  3. If a high-priority subject has extensive topics (from subjectDetails or general knowledge), schedule its core concepts first. Ensure balanced coverage over the total duration, but give precedence to higher priority subjects in the initial phases or by dedicating more time slots to them.
  4. Once core topics of a higher-priority subject seem covered based on the plan's progression (or if it's a shorter subject), you can gradually allocate more of the daily hours to lower-priority subjects later in the plan, or focus entirely on other subjects if a higher priority one is deemed "complete" for the schedule's purpose.
  5. Your output for the 'schedule' field MUST be a valid JSON string that parses into an array of objects.
  6. Each object in the array corresponds to a study day and must have:
     - 'date' (string): 'YYYY-MM-DD'. Start with the provided 'startDate' or today's date (e.g., using '2024-01-01' as a placeholder if today is unknown, then increment correctly for subsequent days).
     - 'task' (string): Detailed description of study activities for the day, including subject names and estimated time allocation for each component to reflect the 'dailyStudyHours'. For example: "Math (P1): Algebra Chapter 1 for 2 hours, Review Physics (P2) notes for 1 hour."
     - 'youtubeSearchQuery' (string, optional): Concise YouTube search query (3-5 words) for relevant videos.
     - 'referenceSearchQuery' (string, optional): Concise web search query (3-5 words) for reference materials like articles or tutorials.

  Example of an object in the JSON array if dailyStudyHours is 3 and startDate is '2024-08-01':
  {"date": "2024-08-01", "task": "Focus on Algebra (Priority 1): Chapter 1 exercises (2 hours), Start History (Priority 2): Chapter 3 reading (1 hour).", "youtubeSearchQuery": "learn algebra basics", "referenceSearchQuery": "algebra chapter 1 study guide"}

  Ensure the entire schedule is a single JSON string. Structure the plan logically over the 'studyDurationDays'.
  Distribute subjects throughout the week. Avoid scheduling too many different subjects on a single day if possible, unless daily hours are very high.
  Make the tasks actionable and clear.
  If 'subjectDetails' are provided, try to create tasks based on those details. If not, create general tasks for the subjects.
  The sum of hours mentioned in the daily 'task' description should reflect the 'dailyStudyHours' input.
  `,
});

const generateStudyScheduleFlow = ai.defineFlow(
  {
    name: 'generateStudyScheduleFlow',
    inputSchema: GenerateStudyScheduleInputSchema,
    outputSchema: GenerateStudyScheduleOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
